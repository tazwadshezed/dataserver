import os, sys
import unittest
import tempfile
from flask_testing import TestCase

from apps import create_app, db
from apps.sitearray.models import Site, SiteArray
from sqlalchemy.exc import IntegrityError

app = create_app(config='etc/testing.cfg')

class SiteTestCase(TestCase):

    TESTING = True

    def create_app(self):
        return app

    def setUp(self):
        db.drop_all()
        db.create_all()

        self.s1 = Site('SPTI','SPTI','DSL')
        db.session.add(self.s1)
        self.sa1 = SiteArray( self.s1 )
        db.session.add(self.sa1)

        self.s2 = Site('SPTI','Austin Energy','Long Center')
        db.session.add(self.s2)
        self.sa2 = SiteArray( self.s2 )
        db.session.add(self.sa2)

        db.session.commit()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_sites(self):
        """
        test sitearray (Test that 2 sites have been setup properly)
        """
        sites = Site.query.all()
        assert len(sites) == 2
        assert sites[0].integrator == 'SPTI'
        assert sites[0].owner      == 'SPTI'
        assert sites[1].integrator == 'SPTI'
        assert sites[1].owner      == 'Austin Energy'

    def test_no_duplicate_site(self):
        """
        test sitearray (Prevent and recover from a duplicate site creation attempt)
        """
        try:
            s3 = Site('SPTI','Austin Energy','Long Center')
            db.session.add(s3)
            db.session.commit()
        except IntegrityError:
            db.session.rollback()

        sites = Site.query.all()
        assert len(sites) == 2


if __name__ == '__main__':
    unittest.main()

