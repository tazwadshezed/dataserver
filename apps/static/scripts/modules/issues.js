/**
 * @preserve Copyright 2012 Draker Inc - Pats Pending
 */

/* 

ISSUES

Author: Justin Winslow
Last updated: 09/05/2012 by Justin Winslow

options : {
	title: 'Alerts',
	filter: false, or {
		by: <field>,
		value: <value>
	},	
	sort: 'date',
	type: 'alerts' or 'faults'
}
*/

define( ['jquery', 'static/scripts/modules/urls', 'devices'], function ($, urls, devices) {

ss.issues = {//Populate message modules
	//myIssues : [],

	template : function(options){
		var size = (options.size)?options.size + 'Width': 'fullWidth',
			addClass = options.addClass || '',
			helpToolTip = (options.issue_type !== 'faults')?'<li class="help"><a href="#help?position=left&amp;width=300" class="link_hover">?</a></li>':'';

		return [
			//'<div class="container ' + size + '">',
				'<div id="' + options.id + '" class="module interactive issues ' + addClass + '">',
					'<div class="title">',
						'<h3>Loading...</h3>',
						'<div class="controls">',
							'<ul>',
								helpToolTip,
							'</ul>',
						'</div>',
					'</div>',
					'<div class="content">',
						'<img src=' + ss.urls.src + '"../../images/icon_loading.gif" class="loading">',
					'</div>',
				'</div>'//,
			//'</div>'
		].join('');
	},

	issue : {
		_init : function(options, appendToElement){
			this.options = $.extend({}, this.options, options);	//Merge paramaters objects
			//console.log('init issue', this.options);
			//this.issues = $.extend(true, {}, ss.myIssues);

			//ss.issues.myIssues.push(this);	//Make a reference to this object to be able to access its methods

			this.$element = $(ss.issues.template(options));
			this.element = this.$element[0];

			this.$element.data('module', this);

			if(appendToElement){
				$(appendToElement).append(this.$element);
			}else{
				$('.container_modules').append(this.$element);
			}
			//console.log('module added to DOM');

			if(this.options.title){
				this.$element.find('.title').children('h3').text(this.options.title.replace(/\+/g, ' '));//Replace title
			}else{
				this.$element.find('.title').remove()
			}
			//console.log('title handled');

			var that = this;

			if(this.$element.hasClass('fullHeight')){
				//console.log('has full height');
				/* 
					Trigger vertical fill if applicable 
					This needs to be a lot savvier
				*/
				//ss.layout.fillVertically();
				require(['static/scripts/modules/layoutHelpers'], function(){
					that.fullHeight = ss.layouts.fullHeight;

					that.fullHeight();

					$(window).smartresize(function(){
						that.fullHeight();
					});
				});
			}
			//console.log('full height handled');
			
			if(that.$element.find('.link_hover')){
				devices.dataDefer.done(function(){
					/* Create the help link hover info */
					ss.modules.create('hovers', {
						position: 'left', 
						width: 300, 
						content: '<p>Issues are generated by the Intelligent Array System based on your array\'s business rules.</p>' +
							'<a href="' + ss.urls.comm + '/admin/show_rules/' + devices.allNodesByType.SiteArray.label + '" class="action">View/Edit Business Rules</a>',
						attachTo: that.$element.find('.link_hover').get()
					});
				});
			}
			//console.log('hover handled');

			if(ss.issueData && ss.issueData[that.options.issue_type]){
				//console.log('issues already loaded');
				that.issues = ss.issueData[that.options.issue_type];
				that._populateIssues();
			}else{
				//console.log('issues not loaded');
				that._getData();
			}
			//console.log('data logic handled');
			
			that._addListeners();
			//console.log('listeners handled');
			//console.log('end issue init')
		},

		_getData : function(){
			//console.log('issues get data');
			var that = this;

			if(!ss.issueData){
				ss.issueData = {};
			}
			
			var myData = $.ajax({
				url: ss.urls[that.options.issue_type],
				cache: false,
				async: true,
				success: function(data){
					//console.log('issue data success', data);

					// Store issue data for use with other modules
					ss.issueData[that.options.issue_type] = data[that.options.issue_type];

					that.issues = data[that.options.issue_type];
					
					//Wait for devices to build the rest of the module
					devices.dataDefer.done(function(){
						that._populateIssues();
					});
				},
				error: function(data){
					ss.modules.create('messages', that.$element.find('.content')[0], {
						type: 'error',
						content: 'Data failed to load',
						css: {
							position: 'absolute',
							top: 0,
							left: 0,
							'z-index': 100
						}
					});

					that.$element.find('img.loading').hide();
				}
			});
		},

		sortIssues : function(){
			/*
				Sort issues function
				Currently works on priority and open date
				Expand this to take arguments for different kinds of sorting
			*/
			if(this.options.issue_type === 'issues'){
				this.issues.sort(function (a, b) {
					if(a.Priority === b.Priority){
						var aProblemDate = a.ProblemDate.split('/')
						, bProblemDate = b.ProblemDate.split('/')
						, aProblemDateSorted = aProblemDate[2] + aProblemDate[0] + aProblemDate[1]
						, bProblemDateSorted = bProblemDate[2] + bProblemDate[0] + bProblemDate[1];

						return (aProblemDateSorted > bProblemDateSorted) ? -1 : ((aProblemDateSorted < bProblemDateSorted) ? 1 : 0);
					}
					
					return b.Priority - a.Priority;
				});
			}else if(this.options.issue_type === 'faults'){
				this.issues.sort(function (a, b) {
					aImpact = +a.energy_loss / +a.duration || 0;
					bImpact = +b.energy_loss / +b.duration || 0;
					
					return (aImpact > bImpact) ? -1 : ((aImpact < bImpact) ? 1 : 0);
				});
			}
		},

		_populateIssues : function(){
			//console.log('populate issues', this.issues);
			var issueList,
				that = this;

			//Sort by severity and date
			this.sortIssues();

			//Hide loading graphic and move it out of the way
			this.$element.find('img.loading').hide().css({
				right:0
			});

			//Create issue container or clear out existing one
			if(this.$element.find('ul.issueList').length){
				issueList = this.$element.find('ul.issueList');
				this.$element.find('ul.issueList li').remove();
			}else{
				issueList = $('<ul class="issueList" />');
				this.$element.find('.content').append(issueList);
			}

			if(this.issues && this.issues.length > 0){
				for(var issue=0, issuesLength=this.issues.length;issue<issuesLength;issue++){
					var myIssue,
						severity = function(){
							var level = (that.issues[issue].level)?that.issues[issue].level:that.issues[issue].Level;
							
							switch(level){
								case 'Data Collection Down':
									return 'alert';
									break;
								case 'Emergency':
									return 'alert';
									break;
								case 'Serious':
									return 'warning';
									break;
								case 'Problem':
									return 'ss';
									break;
								case 'Warning':
									return 'warning';
									break;
								case 'Notice':
									return 'info';
									break;
								default: return 'info';
							}
						}

					// If the device_id is null, skip this loop iteration
					if (this.issues[issue].device_id === null) {
						continue;
					}

					if(this.options.issue_type.toLowerCase() === 'issues'){
						myIssue = [
							'<li id="issue_' + this.issues[issue].id + '" class="issue ' + severity() + '">'
						];

						var actions = function(){
							var myActions = [
								'<ul class="actions">'
							];
							/*if(this.issues[issue].Level == 'Problem'){
								myActions.append('<li><a href="#div-popUp_recommendation" class="link_popUp">View recommended actions</a></li></ul>');
							}*/
							if(/*this.issues[issue].Level != 'Problem' && */that.issues[issue].Node != '' && that.issues[issue].Node.length > 0 && that.issues[issue].Node != undefined && that.issues[issue].Node != null){
								myActions.push('<li><a href="/ss/dashboard/#' + that.issues[issue].Node + '" class="deviceNavigation">View device</a></li></ul>');
							}

							//Close parent element
							myActions.push('</li>')

							return myActions.join('');
						}

						var lastObserved = function(){
							if(that.issues[issue].StateChanges && that.issues[issue].StateChanges[0]){
								var myDate = that.issues[issue].StateChanges[0][1].split(' '),
									myDay = myDate[0].split('-'),
									myTime = myDate[1] + ' ' + myDate[2];
								return '</strong> &nbsp;|&nbsp; <strong>Last Observed</strong>: ' + myDay[1] + '/' + myDay[2] + '/' + myDay[0] + ' at ' + myTime;
							}else{
								return ''
							}
						}();

						//myIssue.append('<p class="date">Created on <strong>' + this.issues[issue].Creation.split(' ')[0] + ' @ ' + this.issues[issue].Creation.split(' ')[1] + '</strong> by <strong>' + this.issues[issue].Creator + '</strong> &nbsp;|&nbsp; Reconfirmed on <strong>' + this.issues[issue].Last_Update.split(' ')[0] + ' @ ' + this.issues[issue].Last_Update.split(' ')[1] + '</strong></p>');
						myIssue.push(
							'<h5>' + this.issues[issue].Summary + '</h5>' +
							'<p class="date"><strong>Created on</strong>: ' +
							this.issues[issue].ProblemDate +
							' by <strong>' +
							this.issues[issue].Creator +
							lastObserved +
							'</strong> &nbsp;|&nbsp; <strong>Status</strong>: ' +
							this.issues[issue].Status +
							'</p>' +
							'<p>' + this.issues[issue].Description + '</p>'
						);
						
						myIssue.push(actions());
						myIssue.data(this.issues[issue]);
						
					}else if(this.options.issue_type.toLowerCase() === 'faults'){
						myIssue = [
							'<li id="fault_' + this.issues[issue].id + '" class="issue info">'
						];

						var myDevice = devices.allNodesById[this.issues[issue].device_id];

						myIssue.push(
							'<h5>' + myDevice.devtype + ' ' + myDevice.label + ' ' + this.issues[issue].category + '</h5>' +
							'<p class="date"><strong>Created on</strong>: ' +
							this.issues[issue].starttime + ' | ' +
							'<strong>Last Observed</strong>: ' +
							this.issues[issue].endtime +
							'</p>' +
							'<ul class="actions">' +
								'<li><a href="#' + that.issues[issue].device_id + '" class="deviceNavigation">View device</a></li>' +
							'</ul>'
						);

						myIssue.push('</li>');
					}else if(this.options.issue_type.toLowerCase() === 'alerts'){
						//Do alerts stuff
						myIssue = [
							'<li id="alert_' + this.issues[issue].id + '" class="issue ' + this.issues[issue].level.toLowerCase() + '">'
						];

						var myDevice = (this.issues[issue].device_id)?devices.allNodesById[this.issues[issue].device_id]:null,
							description = (this.issues[issue].description)?'<p>' + this.issues[issue].description.join(' ') + '</p>':'';

						myIssue.push(
							'<h5>' + this.issues[issue].title + '</h5>' +
							'<p class="date"><strong>Created on</strong>: ' +
							this.issues[issue].created_at +
							'</p>' + description
						);

						if(myDevice && myDevice.devtype !== 'SiteArray'){
							myIssue.push(
								'<ul class="actions">',
									'<li><a href="/ss/dashboard/#' + myDevice.id + '" class="deviceNavigation">View device</a></li>',
								'</ul>'
							);
						}

						myIssue.push('</li>');
					}

					//If a specific node is defined in the options, check if this issue matches, else append it
					if(this.options.node){
						//console.log(this.options.node, this.issues[issue].device_id, myIssue);
						//If issue node matches defined node, append it
						if(this.issues[issue].Node === this.options.node || this.issues[issue].device_id === this.options.node){
							issueList.append($(myIssue.join('')));
						}
					}else{
						issueList.append($(myIssue.join('')));
					}
				}
			}else if (this.issues && this.issues.length <= 0){
				var date = new Date();
				issueList.append('<li class="issue"><h5>No issues reported</h5><p class="date">Updated on <strong>' + date.getFullYear() + '-' + (date.getMonth()+1) + '-' + date.getDate() + '</strong></li>');
			}

			//Cheap way of insuring the module gets populated with something
			if(this.$element.find('.issue').length <= 0){
				var date = new Date();
				issueList.append('<li class="issue"><h5>No issues reported</h5><p class="date">Updated on <strong>' + date.getFullYear() + '-' + (date.getMonth()+1) + '-' + date.getDate() + '</strong></li>');
			}
		},

		filter : function(options){
			//console.log('filter');
			this.$element.find('img.loading').show();

			this.$element.find('.content p.noIssues').remove();
			//console.log(options);
			/*
				Device type
				Device id
				severity/level
				organization
				person
			*/
			if(options.filterValue && options.filterValue.charAt( 0 ) === '!'){
				/* Display by all issues EXCEPT those that match */
				$.each($('.issue'), function(index){
					var myInfo = $(this).data();//Get data stored on dom element
					var filterValue = options.filterValue.replace('!', '');
					
					if(myInfo[options.filterBy] != filterValue){
						$(this).show();
					}else{
						$(this).hide();
					}
				}); 
			}else{
				/* Display by all issues that match */
				$.each($('.issue'), function(index){
					var myInfo = $(this).data();//Get data stored on dom element
					
					if(myInfo[options.filterBy] == options.filterValue){
						$(this).show();
					}else{
						$(this).hide();
					}
				});
			}
			
			for(issue=0, issuesLength=$('.issue').length; issue<issuesLength; issue++){
				if($('.issue').is(":visible")){
					//console.log(issue + ' is visible');
					break;
				}else{
					//console.log(issue);
					//console.log(issuesLength);
					if(issue == issuesLength-1){
						//console.log('no issues');
						this.$element.find('.content').prepend('<p class="noIssues">No issues found</p>');
					}
				}
			}
			//console.log($('.issue').length)
			if(!$('.issue').is(":visible").leng){
				//I think I added this with the intent on checking if nothing was visible and adding a dummy message in
			}

			this.$element.find('img.loading').hide();
		},

		archive : function(options){
			//console.log(options);
			this.$element.find('img.loading').show();

			$('a.issueFilter').removeClass('active');//Remove active class from filter lists
			this.filter({});//Clear filter

			var that = this;

			$.ajax({
				url: ss.urls[this.options.issue_type] + options.archive,
				cache: false,
				success: function(data){
					//console.log(data);
					if($('ul.list_issueFilters').length){
						$('ul.list_issueFilters')
							.prepend(
								'<li><a href="#?filterBy=Status&amp;filterValue=closed" class="issueFilter">Closed Issues</a></li>'
							)
							.prepend(
								'<li><a href="#?filterBy=Status&amp;filterValue=!closed" class="issueFilter">Open Issues</a></li>'
							);
					}

					//that.issues.push(data.data);
					$.merge(that.issues, data.issues);

					that.sortIssues();

					that.$element.find('ul.issueList').remove();

					that._populateIssues();
				},
				error: function(){
					ss.modules.create('messages', that.$element.find('.content')[0], {
						type: 'error',
						content: 'Archived issues failed to load',
						css: {
							position: 'absolute',
							top: 0,
							left: 0,
							'z-index': 100
						}
					});
				}
			});
		},

		update : function(){
			this.$element.find('.message').remove();
			this.$element.find('img.loading').css({display:'',top:0});

			this._getData();
		},

		destroy : function(){
			//Remove element from dom and purge from memory
			//console.log(this);
			
			this.$element.remove();

			//Remove events
			this.$element.off();

			//Remove stored reference
			/*
			for(var issue=0, issuesLength=ss.issues.myIssues.length; issue<issuesLength; issue++){
				var myIssue = ss.issues.myIssues[issue];

				if(myIssue && myIssue.options.id === this.options.id){
					//ss.issues.myIssues.splice(issue);
					delete(ss.issues.myIssues[issue]);
					break;
				}
			}*/

			$(document).unbind('.issue.' + this.options.id);
		},

		_addListeners : function(){
			var that = this;

			this.$element.delegate('a.deviceNavigation', 'click', function(event){
				var myDevice = $(this).attr('href').split('#')[1];

				$(document).trigger('setDevice', {deviceId: myDevice});
			});

			$('body').delegate('a.issueFilter', 'click', function(event){
				event.preventDefault();


				$('a.issueFilter').removeClass('active');

				if(!$(this).hasClass('clear')){
					$(this).addClass('active');
				}

				var keyValuePairs = $(this).attr('href').replace('#?', '').split('&'),
					options = {};

				for(option=0;option<keyValuePairs.length;option++){
					var myOption = keyValuePairs[option].split('=');
					options[myOption[0]] = myOption[1]
				}

				that.filter(options);
			});

			$('body').delegate('a.issueArchive', 'click', function(event){
				event.preventDefault();
				$(this).replaceWith('<span class="text_disabled">' + $(this).text() + '</span>');
				//console.log($(this).text());

				var keyValuePairs = $(this).attr('href').replace('#?', '').split('&'),
					options = {};

				for(option=0;option<keyValuePairs.length;option++){
					var myOption = keyValuePairs[option].split('=');
					options[myOption[0]] = myOption[1]
				}

				that.archive(options);
			});

			$(document).bind('updateModules.issue.' + this.options.id, function(){
				that.update();
			});
		},

		options : {
			title: 'Issues',
			issue_type: 'issues',
			filterBy: null,
			filterValue: null,
			sort: 'date',
			node: false
		}
	}
}

return ss.issues.issue;

});//end define